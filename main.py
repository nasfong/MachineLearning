from fastapi import FastAPI, HTTPException
from motor.motor_asyncio import AsyncIOMotorClient
from typing import List, Optional
from pydantic import BaseModel, Field
import os

# MongoDB connection
MONGO_URL = os.getenv(
    "MONGO_URL", 
    "mongodb://admin:your_mongo_password@mongodb.nasfong.site:443?ssl=true&authSource=admin"
)

app = FastAPI(title="Products API")

client = AsyncIOMotorClient(MONGO_URL)
db = client["motor"]
collection = db["products"]

# ----- Model -----
class Product(BaseModel):
    id: Optional[str] = None  # id will be generated by MongoDB
    name: str
    price: str
    description: Optional[str] = None
    image: Optional[List[str]] = None

class ProductCreate(BaseModel):
    name: str
    price: str
    description: Optional[str] = None
    image: Optional[List[str]] = None

# ----- Routes -----
@app.get("/")
def root():
    return {"message": "API is running"}

@app.get("/products", response_model=List[Product])
async def list_products():
    try:
        products: List[Product] = []

        async for doc in collection.find():
            product = Product(
                id=str(doc["_id"]),
                name=doc.get("name", "Unknown"),
                price=str(doc.get("price", "0.0")),
                description=doc.get("description"),
                image=doc.get("image"),
            )
            products.append(product)

        return products

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Database error: {e}")

# ----- Create Product -----
@app.post("/products", response_model=Product)
async def create_product(product: ProductCreate):
    try:
        result = await collection.insert_one(product.dict())
        created_product = await collection.find_one({"_id": result.inserted_id})
        return Product(
            id=str(created_product["_id"]),
            name=created_product["name"],
            price=str(created_product["price"]),
            description=created_product.get("description"),
            image=created_product.get("image"),
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Database error: {e}")
